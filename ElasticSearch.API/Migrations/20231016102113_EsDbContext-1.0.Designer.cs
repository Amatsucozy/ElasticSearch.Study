// <auto-generated />
using System;
using ElasticSearch.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElasticSearch.API.Migrations
{
    [DbContext(typeof(EsDbContext))]
    [Migration("20231016102113_EsDbContext-1.0")]
    partial class EsDbContext10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("es")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElasticSearch.API.Core.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Contacts", "es");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.ContactExtensionField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ContactExtensionFields", "es");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.ContactExtensionValue", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExtensionFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId", "ExtensionFieldId");

                    b.HasIndex("ExtensionFieldId");

                    b.ToTable("ContactExtensionValues", "es");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenants", "es");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.Contact", b =>
                {
                    b.HasOne("ElasticSearch.API.Core.Models.Tenant", "Tenant")
                        .WithMany("Contacts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.ContactExtensionField", b =>
                {
                    b.HasOne("ElasticSearch.API.Core.Models.Tenant", "Tenant")
                        .WithMany("ExtensionFields")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.ContactExtensionValue", b =>
                {
                    b.HasOne("ElasticSearch.API.Core.Models.Contact", "Contact")
                        .WithMany("ExtensionValues")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElasticSearch.API.Core.Models.ContactExtensionField", "ExtensionField")
                        .WithMany("ExtensionValues")
                        .HasForeignKey("ExtensionFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ExtensionField");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.Contact", b =>
                {
                    b.Navigation("ExtensionValues");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.ContactExtensionField", b =>
                {
                    b.Navigation("ExtensionValues");
                });

            modelBuilder.Entity("ElasticSearch.API.Core.Models.Tenant", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("ExtensionFields");
                });
#pragma warning restore 612, 618
        }
    }
}
